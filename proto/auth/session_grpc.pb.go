// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: session.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	base "github.com/SolmateDev/go-client/proto/base"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	CreateByApiKey(ctx context.Context, in *ApiKeySessionRequest, opts ...grpc.CallOption) (*ApiKeySessionResponse, error)
	Check(ctx context.Context, in *SessionCheck, opts ...grpc.CallOption) (*SessionResponse, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CreateByApiKey(ctx context.Context, in *ApiKeySessionRequest, opts ...grpc.CallOption) (*ApiKeySessionResponse, error) {
	out := new(ApiKeySessionResponse)
	err := c.cc.Invoke(ctx, "/auth.Session/CreateByApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Check(ctx context.Context, in *SessionCheck, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/auth.Session/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility
type SessionServer interface {
	CreateByApiKey(context.Context, *ApiKeySessionRequest) (*ApiKeySessionResponse, error)
	Check(context.Context, *SessionCheck) (*SessionResponse, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (UnimplementedSessionServer) CreateByApiKey(context.Context, *ApiKeySessionRequest) (*ApiKeySessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByApiKey not implemented")
}
func (UnimplementedSessionServer) Check(context.Context, *SessionCheck) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_CreateByApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateByApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Session/CreateByApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateByApiKey(ctx, req.(*ApiKeySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Session/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Check(ctx, req.(*SessionCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateByApiKey",
			Handler:    _Session_CreateByApiKey_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Session_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// create a key; if one key exists, it will become invalid and replaced by the new key
	CreateApiKey(ctx context.Context, in *ApiKeyRequest, opts ...grpc.CallOption) (*ApiKeyResponse, error)
	// view the prefix of the current key
	ViewApiKey(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*ApiKeyResponse, error)
	Lookup(ctx context.Context, in *base.UserLookup, opts ...grpc.CallOption) (*Profile, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateApiKey(ctx context.Context, in *ApiKeyRequest, opts ...grpc.CallOption) (*ApiKeyResponse, error) {
	out := new(ApiKeyResponse)
	err := c.cc.Invoke(ctx, "/auth.User/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ViewApiKey(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*ApiKeyResponse, error) {
	out := new(ApiKeyResponse)
	err := c.cc.Invoke(ctx, "/auth.User/ViewApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Lookup(ctx context.Context, in *base.UserLookup, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/auth.User/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// create a key; if one key exists, it will become invalid and replaced by the new key
	CreateApiKey(context.Context, *ApiKeyRequest) (*ApiKeyResponse, error)
	// view the prefix of the current key
	ViewApiKey(context.Context, *base.Empty) (*ApiKeyResponse, error)
	Lookup(context.Context, *base.UserLookup) (*Profile, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateApiKey(context.Context, *ApiKeyRequest) (*ApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedUserServer) ViewApiKey(context.Context, *base.Empty) (*ApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewApiKey not implemented")
}
func (UnimplementedUserServer) Lookup(context.Context, *base.UserLookup) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.User/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateApiKey(ctx, req.(*ApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ViewApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ViewApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.User/ViewApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ViewApiKey(ctx, req.(*base.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.UserLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.User/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Lookup(ctx, req.(*base.UserLookup))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApiKey",
			Handler:    _User_CreateApiKey_Handler,
		},
		{
			MethodName: "ViewApiKey",
			Handler:    _User_ViewApiKey_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _User_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
