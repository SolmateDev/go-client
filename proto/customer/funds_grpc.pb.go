// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zzzz-customer-funds.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	base "github.com/SolmateDev/go-client/proto/base"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundsClient is the client API for Funds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundsClient interface {
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	StartDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	StartWithdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*base.Result, error)
}

type fundsClient struct {
	cc grpc.ClientConnInterface
}

func NewFundsClient(cc grpc.ClientConnInterface) FundsClient {
	return &fundsClient{cc}
}

func (c *fundsClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/customer.Funds/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsClient) GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/customer.Funds/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsClient) StartDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/customer.Funds/StartDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsClient) StartWithdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/customer.Funds/StartWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundsClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*base.Result, error) {
	out := new(base.Result)
	err := c.cc.Invoke(ctx, "/customer.Funds/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundsServer is the server API for Funds service.
// All implementations must embed UnimplementedFundsServer
// for forward compatibility
type FundsServer interface {
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	StartDeposit(context.Context, *DepositRequest) (*DepositResponse, error)
	StartWithdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Transfer(context.Context, *TransferRequest) (*base.Result, error)
	mustEmbedUnimplementedFundsServer()
}

// UnimplementedFundsServer must be embedded to have forward compatible implementations.
type UnimplementedFundsServer struct {
}

func (UnimplementedFundsServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedFundsServer) GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedFundsServer) StartDeposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeposit not implemented")
}
func (UnimplementedFundsServer) StartWithdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWithdrawal not implemented")
}
func (UnimplementedFundsServer) Transfer(context.Context, *TransferRequest) (*base.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedFundsServer) mustEmbedUnimplementedFundsServer() {}

// UnsafeFundsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundsServer will
// result in compilation errors.
type UnsafeFundsServer interface {
	mustEmbedUnimplementedFundsServer()
}

func RegisterFundsServer(s grpc.ServiceRegistrar, srv FundsServer) {
	s.RegisterService(&Funds_ServiceDesc, srv)
}

func _Funds_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Funds/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funds_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Funds/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServer).GetHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funds_StartDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServer).StartDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Funds/StartDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServer).StartDeposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funds_StartWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServer).StartWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Funds/StartWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServer).StartWithdrawal(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funds_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundsServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Funds/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundsServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Funds_ServiceDesc is the grpc.ServiceDesc for Funds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.Funds",
	HandlerType: (*FundsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Funds_GetBalance_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Funds_GetHistory_Handler,
		},
		{
			MethodName: "StartDeposit",
			Handler:    _Funds_StartDeposit_Handler,
		},
		{
			MethodName: "StartWithdrawal",
			Handler:    _Funds_StartWithdrawal_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Funds_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zzzz-customer-funds.proto",
}
