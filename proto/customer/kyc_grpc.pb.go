// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zzzz-customer-kyc.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	base "github.com/SolmateDev/go-client/proto/base"
	kyc "github.com/SolmateDev/go-client/proto/kyc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KYCClient is the client API for KYC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KYCClient interface {
	PersonSave(ctx context.Context, in *kyc.Person, opts ...grpc.CallOption) (*base.Empty, error)
	RequirementLoad(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*RequirementResponse, error)
	DocumentUpload(ctx context.Context, opts ...grpc.CallOption) (KYC_DocumentUploadClient, error)
}

type kYCClient struct {
	cc grpc.ClientConnInterface
}

func NewKYCClient(cc grpc.ClientConnInterface) KYCClient {
	return &kYCClient{cc}
}

func (c *kYCClient) PersonSave(ctx context.Context, in *kyc.Person, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/customer.KYC/PersonSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCClient) RequirementLoad(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*RequirementResponse, error) {
	out := new(RequirementResponse)
	err := c.cc.Invoke(ctx, "/customer.KYC/RequirementLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kYCClient) DocumentUpload(ctx context.Context, opts ...grpc.CallOption) (KYC_DocumentUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &KYC_ServiceDesc.Streams[0], "/customer.KYC/DocumentUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &kYCDocumentUploadClient{stream}
	return x, nil
}

type KYC_DocumentUploadClient interface {
	Send(*DocumentUploadRequest) error
	CloseAndRecv() (*base.File, error)
	grpc.ClientStream
}

type kYCDocumentUploadClient struct {
	grpc.ClientStream
}

func (x *kYCDocumentUploadClient) Send(m *DocumentUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kYCDocumentUploadClient) CloseAndRecv() (*base.File, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(base.File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KYCServer is the server API for KYC service.
// All implementations must embed UnimplementedKYCServer
// for forward compatibility
type KYCServer interface {
	PersonSave(context.Context, *kyc.Person) (*base.Empty, error)
	RequirementLoad(context.Context, *base.Empty) (*RequirementResponse, error)
	DocumentUpload(KYC_DocumentUploadServer) error
	mustEmbedUnimplementedKYCServer()
}

// UnimplementedKYCServer must be embedded to have forward compatible implementations.
type UnimplementedKYCServer struct {
}

func (UnimplementedKYCServer) PersonSave(context.Context, *kyc.Person) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonSave not implemented")
}
func (UnimplementedKYCServer) RequirementLoad(context.Context, *base.Empty) (*RequirementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequirementLoad not implemented")
}
func (UnimplementedKYCServer) DocumentUpload(KYC_DocumentUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method DocumentUpload not implemented")
}
func (UnimplementedKYCServer) mustEmbedUnimplementedKYCServer() {}

// UnsafeKYCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KYCServer will
// result in compilation errors.
type UnsafeKYCServer interface {
	mustEmbedUnimplementedKYCServer()
}

func RegisterKYCServer(s grpc.ServiceRegistrar, srv KYCServer) {
	s.RegisterService(&KYC_ServiceDesc, srv)
}

func _KYC_PersonSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kyc.Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServer).PersonSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.KYC/PersonSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServer).PersonSave(ctx, req.(*kyc.Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYC_RequirementLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KYCServer).RequirementLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.KYC/RequirementLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KYCServer).RequirementLoad(ctx, req.(*base.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KYC_DocumentUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KYCServer).DocumentUpload(&kYCDocumentUploadServer{stream})
}

type KYC_DocumentUploadServer interface {
	SendAndClose(*base.File) error
	Recv() (*DocumentUploadRequest, error)
	grpc.ServerStream
}

type kYCDocumentUploadServer struct {
	grpc.ServerStream
}

func (x *kYCDocumentUploadServer) SendAndClose(m *base.File) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kYCDocumentUploadServer) Recv() (*DocumentUploadRequest, error) {
	m := new(DocumentUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KYC_ServiceDesc is the grpc.ServiceDesc for KYC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KYC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.KYC",
	HandlerType: (*KYCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersonSave",
			Handler:    _KYC_PersonSave_Handler,
		},
		{
			MethodName: "RequirementLoad",
			Handler:    _KYC_RequirementLoad_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DocumentUpload",
			Handler:       _KYC_DocumentUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "zzzz-customer-kyc.proto",
}
