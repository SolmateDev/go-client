// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zzzz-customer-trade.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderManagerClient is the client API for OrderManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagerClient interface {
	// submit an order
	Submit(ctx context.Context, in *Order, opts ...grpc.CallOption) (OrderManager_SubmitClient, error)
	// get the status of a pending order or cancel request
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (OrderManager_GetStatusClient, error)
	// cancel a pending order
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (OrderManager_CancelClient, error)
}

type orderManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagerClient(cc grpc.ClientConnInterface) OrderManagerClient {
	return &orderManagerClient{cc}
}

func (c *orderManagerClient) Submit(ctx context.Context, in *Order, opts ...grpc.CallOption) (OrderManager_SubmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManager_ServiceDesc.Streams[0], "/customer.OrderManager/Submit", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagerSubmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManager_SubmitClient interface {
	Recv() (*OrderStatus, error)
	grpc.ClientStream
}

type orderManagerSubmitClient struct {
	grpc.ClientStream
}

func (x *orderManagerSubmitClient) Recv() (*OrderStatus, error) {
	m := new(OrderStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (OrderManager_GetStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManager_ServiceDesc.Streams[1], "/customer.OrderManager/GetStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagerGetStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManager_GetStatusClient interface {
	Recv() (*OrderStatus, error)
	grpc.ClientStream
}

type orderManagerGetStatusClient struct {
	grpc.ClientStream
}

func (x *orderManagerGetStatusClient) Recv() (*OrderStatus, error) {
	m := new(OrderStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderManagerClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (OrderManager_CancelClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManager_ServiceDesc.Streams[2], "/customer.OrderManager/Cancel", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagerCancelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManager_CancelClient interface {
	Recv() (*CancelEvent, error)
	grpc.ClientStream
}

type orderManagerCancelClient struct {
	grpc.ClientStream
}

func (x *orderManagerCancelClient) Recv() (*CancelEvent, error) {
	m := new(CancelEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagerServer is the server API for OrderManager service.
// All implementations must embed UnimplementedOrderManagerServer
// for forward compatibility
type OrderManagerServer interface {
	// submit an order
	Submit(*Order, OrderManager_SubmitServer) error
	// get the status of a pending order or cancel request
	GetStatus(*StatusRequest, OrderManager_GetStatusServer) error
	// cancel a pending order
	Cancel(*CancelRequest, OrderManager_CancelServer) error
	mustEmbedUnimplementedOrderManagerServer()
}

// UnimplementedOrderManagerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderManagerServer struct {
}

func (UnimplementedOrderManagerServer) Submit(*Order, OrderManager_SubmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedOrderManagerServer) GetStatus(*StatusRequest, OrderManager_GetStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedOrderManagerServer) Cancel(*CancelRequest, OrderManager_CancelServer) error {
	return status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedOrderManagerServer) mustEmbedUnimplementedOrderManagerServer() {}

// UnsafeOrderManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagerServer will
// result in compilation errors.
type UnsafeOrderManagerServer interface {
	mustEmbedUnimplementedOrderManagerServer()
}

func RegisterOrderManagerServer(s grpc.ServiceRegistrar, srv OrderManagerServer) {
	s.RegisterService(&OrderManager_ServiceDesc, srv)
}

func _OrderManager_Submit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Order)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagerServer).Submit(m, &orderManagerSubmitServer{stream})
}

type OrderManager_SubmitServer interface {
	Send(*OrderStatus) error
	grpc.ServerStream
}

type orderManagerSubmitServer struct {
	grpc.ServerStream
}

func (x *orderManagerSubmitServer) Send(m *OrderStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderManager_GetStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagerServer).GetStatus(m, &orderManagerGetStatusServer{stream})
}

type OrderManager_GetStatusServer interface {
	Send(*OrderStatus) error
	grpc.ServerStream
}

type orderManagerGetStatusServer struct {
	grpc.ServerStream
}

func (x *orderManagerGetStatusServer) Send(m *OrderStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderManager_Cancel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CancelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagerServer).Cancel(m, &orderManagerCancelServer{stream})
}

type OrderManager_CancelServer interface {
	Send(*CancelEvent) error
	grpc.ServerStream
}

type orderManagerCancelServer struct {
	grpc.ServerStream
}

func (x *orderManagerCancelServer) Send(m *CancelEvent) error {
	return x.ServerStream.SendMsg(m)
}

// OrderManager_ServiceDesc is the grpc.ServiceDesc for OrderManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.OrderManager",
	HandlerType: (*OrderManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Submit",
			Handler:       _OrderManager_Submit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStatus",
			Handler:       _OrderManager_GetStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Cancel",
			Handler:       _OrderManager_Cancel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zzzz-customer-trade.proto",
}
