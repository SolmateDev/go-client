// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zzzz-customer-ledger.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	base "github.com/SolmateDev/go-client/proto/base"
	ledger "github.com/SolmateDev/go-client/proto/ledger"
	solana "github.com/SolmateDev/go-client/proto/solana"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerClient is the client API for Ledger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerClient interface {
	GetCommodity(ctx context.Context, in *CommodityRequest, opts ...grpc.CallOption) (*base.ShortCommodity, error)
	GetSolanaToken(ctx context.Context, in *solana.TokenRequest, opts ...grpc.CallOption) (*solana.TokenResponse, error)
	ListMaster(ctx context.Context, in *ledger.ListMasterRequest, opts ...grpc.CallOption) (*ledger.ListMasterResponse, error)
}

type ledgerClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerClient(cc grpc.ClientConnInterface) LedgerClient {
	return &ledgerClient{cc}
}

func (c *ledgerClient) GetCommodity(ctx context.Context, in *CommodityRequest, opts ...grpc.CallOption) (*base.ShortCommodity, error) {
	out := new(base.ShortCommodity)
	err := c.cc.Invoke(ctx, "/customer.Ledger/GetCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) GetSolanaToken(ctx context.Context, in *solana.TokenRequest, opts ...grpc.CallOption) (*solana.TokenResponse, error) {
	out := new(solana.TokenResponse)
	err := c.cc.Invoke(ctx, "/customer.Ledger/GetSolanaToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) ListMaster(ctx context.Context, in *ledger.ListMasterRequest, opts ...grpc.CallOption) (*ledger.ListMasterResponse, error) {
	out := new(ledger.ListMasterResponse)
	err := c.cc.Invoke(ctx, "/customer.Ledger/ListMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServer is the server API for Ledger service.
// All implementations must embed UnimplementedLedgerServer
// for forward compatibility
type LedgerServer interface {
	GetCommodity(context.Context, *CommodityRequest) (*base.ShortCommodity, error)
	GetSolanaToken(context.Context, *solana.TokenRequest) (*solana.TokenResponse, error)
	ListMaster(context.Context, *ledger.ListMasterRequest) (*ledger.ListMasterResponse, error)
	mustEmbedUnimplementedLedgerServer()
}

// UnimplementedLedgerServer must be embedded to have forward compatible implementations.
type UnimplementedLedgerServer struct {
}

func (UnimplementedLedgerServer) GetCommodity(context.Context, *CommodityRequest) (*base.ShortCommodity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommodity not implemented")
}
func (UnimplementedLedgerServer) GetSolanaToken(context.Context, *solana.TokenRequest) (*solana.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolanaToken not implemented")
}
func (UnimplementedLedgerServer) ListMaster(context.Context, *ledger.ListMasterRequest) (*ledger.ListMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaster not implemented")
}
func (UnimplementedLedgerServer) mustEmbedUnimplementedLedgerServer() {}

// UnsafeLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServer will
// result in compilation errors.
type UnsafeLedgerServer interface {
	mustEmbedUnimplementedLedgerServer()
}

func RegisterLedgerServer(s grpc.ServiceRegistrar, srv LedgerServer) {
	s.RegisterService(&Ledger_ServiceDesc, srv)
}

func _Ledger_GetCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).GetCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Ledger/GetCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).GetCommodity(ctx, req.(*CommodityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_GetSolanaToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(solana.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).GetSolanaToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Ledger/GetSolanaToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).GetSolanaToken(ctx, req.(*solana.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_ListMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ledger.ListMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).ListMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Ledger/ListMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).ListMaster(ctx, req.(*ledger.ListMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ledger_ServiceDesc is the grpc.ServiceDesc for Ledger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ledger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.Ledger",
	HandlerType: (*LedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommodity",
			Handler:    _Ledger_GetCommodity_Handler,
		},
		{
			MethodName: "GetSolanaToken",
			Handler:    _Ledger_GetSolanaToken_Handler,
		},
		{
			MethodName: "ListMaster",
			Handler:    _Ledger_ListMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zzzz-customer-ledger.proto",
}
