// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zzzz-customer-saas.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	base "github.com/SolmateDev/go-client/proto/base"
	saas "github.com/SolmateDev/go-client/proto/saas"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaasClient is the client API for Saas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaasClient interface {
	ListProduct(ctx context.Context, in *SaasListProductRequest, opts ...grpc.CallOption) (*SaasListProductResponse, error)
	LinkToStripe(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*LinkToStripeResponse, error)
	Subscribe(ctx context.Context, in *SaasSubscribeRequest, opts ...grpc.CallOption) (*LinkToStripeResponse, error)
	GetUsage(ctx context.Context, in *saas.UsageRequest, opts ...grpc.CallOption) (*saas.UsageHistory, error)
}

type saasClient struct {
	cc grpc.ClientConnInterface
}

func NewSaasClient(cc grpc.ClientConnInterface) SaasClient {
	return &saasClient{cc}
}

func (c *saasClient) ListProduct(ctx context.Context, in *SaasListProductRequest, opts ...grpc.CallOption) (*SaasListProductResponse, error) {
	out := new(SaasListProductResponse)
	err := c.cc.Invoke(ctx, "/customer.Saas/ListProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saasClient) LinkToStripe(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*LinkToStripeResponse, error) {
	out := new(LinkToStripeResponse)
	err := c.cc.Invoke(ctx, "/customer.Saas/LinkToStripe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saasClient) Subscribe(ctx context.Context, in *SaasSubscribeRequest, opts ...grpc.CallOption) (*LinkToStripeResponse, error) {
	out := new(LinkToStripeResponse)
	err := c.cc.Invoke(ctx, "/customer.Saas/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saasClient) GetUsage(ctx context.Context, in *saas.UsageRequest, opts ...grpc.CallOption) (*saas.UsageHistory, error) {
	out := new(saas.UsageHistory)
	err := c.cc.Invoke(ctx, "/customer.Saas/GetUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaasServer is the server API for Saas service.
// All implementations must embed UnimplementedSaasServer
// for forward compatibility
type SaasServer interface {
	ListProduct(context.Context, *SaasListProductRequest) (*SaasListProductResponse, error)
	LinkToStripe(context.Context, *base.Empty) (*LinkToStripeResponse, error)
	Subscribe(context.Context, *SaasSubscribeRequest) (*LinkToStripeResponse, error)
	GetUsage(context.Context, *saas.UsageRequest) (*saas.UsageHistory, error)
	mustEmbedUnimplementedSaasServer()
}

// UnimplementedSaasServer must be embedded to have forward compatible implementations.
type UnimplementedSaasServer struct {
}

func (UnimplementedSaasServer) ListProduct(context.Context, *SaasListProductRequest) (*SaasListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedSaasServer) LinkToStripe(context.Context, *base.Empty) (*LinkToStripeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkToStripe not implemented")
}
func (UnimplementedSaasServer) Subscribe(context.Context, *SaasSubscribeRequest) (*LinkToStripeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSaasServer) GetUsage(context.Context, *saas.UsageRequest) (*saas.UsageHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsage not implemented")
}
func (UnimplementedSaasServer) mustEmbedUnimplementedSaasServer() {}

// UnsafeSaasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaasServer will
// result in compilation errors.
type UnsafeSaasServer interface {
	mustEmbedUnimplementedSaasServer()
}

func RegisterSaasServer(s grpc.ServiceRegistrar, srv SaasServer) {
	s.RegisterService(&Saas_ServiceDesc, srv)
}

func _Saas_ListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaasListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaasServer).ListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Saas/ListProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaasServer).ListProduct(ctx, req.(*SaasListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saas_LinkToStripe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaasServer).LinkToStripe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Saas/LinkToStripe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaasServer).LinkToStripe(ctx, req.(*base.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saas_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaasSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaasServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Saas/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaasServer).Subscribe(ctx, req.(*SaasSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saas_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(saas.UsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaasServer).GetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Saas/GetUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaasServer).GetUsage(ctx, req.(*saas.UsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Saas_ServiceDesc is the grpc.ServiceDesc for Saas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Saas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.Saas",
	HandlerType: (*SaasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProduct",
			Handler:    _Saas_ListProduct_Handler,
		},
		{
			MethodName: "LinkToStripe",
			Handler:    _Saas_LinkToStripe_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Saas_Subscribe_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _Saas_GetUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zzzz-customer-saas.proto",
}
