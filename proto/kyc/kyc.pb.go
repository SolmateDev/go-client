// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: kyc.proto

package kyc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 5.3.14
type NationalIdentifierType int32

const (
	NationalIdentifierType_ARNU NationalIdentifierType = 0
	NationalIdentifierType_CCPT NationalIdentifierType = 1
	NationalIdentifierType_RAID NationalIdentifierType = 2
	NationalIdentifierType_DRLC NationalIdentifierType = 3
	NationalIdentifierType_FIIN NationalIdentifierType = 4
	NationalIdentifierType_TXID NationalIdentifierType = 5
	NationalIdentifierType_SOCS NationalIdentifierType = 6
	NationalIdentifierType_IDCD NationalIdentifierType = 7
	NationalIdentifierType_LEIX NationalIdentifierType = 8
	NationalIdentifierType_MISC NationalIdentifierType = 9
)

// Enum value maps for NationalIdentifierType.
var (
	NationalIdentifierType_name = map[int32]string{
		0: "ARNU",
		1: "CCPT",
		2: "RAID",
		3: "DRLC",
		4: "FIIN",
		5: "TXID",
		6: "SOCS",
		7: "IDCD",
		8: "LEIX",
		9: "MISC",
	}
	NationalIdentifierType_value = map[string]int32{
		"ARNU": 0,
		"CCPT": 1,
		"RAID": 2,
		"DRLC": 3,
		"FIIN": 4,
		"TXID": 5,
		"SOCS": 6,
		"IDCD": 7,
		"LEIX": 8,
		"MISC": 9,
	}
)

func (x NationalIdentifierType) Enum() *NationalIdentifierType {
	p := new(NationalIdentifierType)
	*p = x
	return p
}

func (x NationalIdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NationalIdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_kyc_proto_enumTypes[0].Descriptor()
}

func (NationalIdentifierType) Type() protoreflect.EnumType {
	return &file_kyc_proto_enumTypes[0]
}

func (x NationalIdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NationalIdentifierType.Descriptor instead.
func (NationalIdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{0}
}

type Address_AddressType int32

const (
	Address_HOME Address_AddressType = 0
	Address_BIZZ Address_AddressType = 1
	Address_GEOG Address_AddressType = 2
)

// Enum value maps for Address_AddressType.
var (
	Address_AddressType_name = map[int32]string{
		0: "HOME",
		1: "BIZZ",
		2: "GEOG",
	}
	Address_AddressType_value = map[string]int32{
		"HOME": 0,
		"BIZZ": 1,
		"GEOG": 2,
	}
)

func (x Address_AddressType) Enum() *Address_AddressType {
	p := new(Address_AddressType)
	*p = x
	return p
}

func (x Address_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_kyc_proto_enumTypes[1].Descriptor()
}

func (Address_AddressType) Type() protoreflect.EnumType {
	return &file_kyc_proto_enumTypes[1]
}

func (x Address_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_AddressType.Descriptor instead.
func (Address_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{0, 0}
}

type NaturalPersonNameID_NaturalPersonNameTypeCode int32

const (
	NaturalPersonNameID_ALIA NaturalPersonNameID_NaturalPersonNameTypeCode = 0
	NaturalPersonNameID_BIRT NaturalPersonNameID_NaturalPersonNameTypeCode = 1
	NaturalPersonNameID_MAID NaturalPersonNameID_NaturalPersonNameTypeCode = 2
	NaturalPersonNameID_LEGL NaturalPersonNameID_NaturalPersonNameTypeCode = 3
	NaturalPersonNameID_MISC NaturalPersonNameID_NaturalPersonNameTypeCode = 4
)

// Enum value maps for NaturalPersonNameID_NaturalPersonNameTypeCode.
var (
	NaturalPersonNameID_NaturalPersonNameTypeCode_name = map[int32]string{
		0: "ALIA",
		1: "BIRT",
		2: "MAID",
		3: "LEGL",
		4: "MISC",
	}
	NaturalPersonNameID_NaturalPersonNameTypeCode_value = map[string]int32{
		"ALIA": 0,
		"BIRT": 1,
		"MAID": 2,
		"LEGL": 3,
		"MISC": 4,
	}
)

func (x NaturalPersonNameID_NaturalPersonNameTypeCode) Enum() *NaturalPersonNameID_NaturalPersonNameTypeCode {
	p := new(NaturalPersonNameID_NaturalPersonNameTypeCode)
	*p = x
	return p
}

func (x NaturalPersonNameID_NaturalPersonNameTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NaturalPersonNameID_NaturalPersonNameTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_kyc_proto_enumTypes[2].Descriptor()
}

func (NaturalPersonNameID_NaturalPersonNameTypeCode) Type() protoreflect.EnumType {
	return &file_kyc_proto_enumTypes[2]
}

func (x NaturalPersonNameID_NaturalPersonNameTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NaturalPersonNameID_NaturalPersonNameTypeCode.Descriptor instead.
func (NaturalPersonNameID_NaturalPersonNameTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{3, 0}
}

type LegalPersonNameID_Type int32

const (
	LegalPersonNameID_LEGL LegalPersonNameID_Type = 0
	LegalPersonNameID_SHRT LegalPersonNameID_Type = 1
	LegalPersonNameID_TRAD LegalPersonNameID_Type = 2
)

// Enum value maps for LegalPersonNameID_Type.
var (
	LegalPersonNameID_Type_name = map[int32]string{
		0: "LEGL",
		1: "SHRT",
		2: "TRAD",
	}
	LegalPersonNameID_Type_value = map[string]int32{
		"LEGL": 0,
		"SHRT": 1,
		"TRAD": 2,
	}
)

func (x LegalPersonNameID_Type) Enum() *LegalPersonNameID_Type {
	p := new(LegalPersonNameID_Type)
	*p = x
	return p
}

func (x LegalPersonNameID_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegalPersonNameID_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_kyc_proto_enumTypes[3].Descriptor()
}

func (LegalPersonNameID_Type) Type() protoreflect.EnumType {
	return &file_kyc_proto_enumTypes[3]
}

func (x LegalPersonNameID_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegalPersonNameID_Type.Descriptor instead.
func (LegalPersonNameID_Type) EnumDescriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{6, 0}
}

// 5.2.6
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType        Address_AddressType `protobuf:"varint,1,opt,name=addressType,proto3,enum=kyc.Address_AddressType" json:"addressType,omitempty"`
	Department         string              `protobuf:"bytes,2,opt,name=department,proto3" json:"department,omitempty"`
	SubDepartment      string              `protobuf:"bytes,3,opt,name=subDepartment,proto3" json:"subDepartment,omitempty"`
	StreetName         string              `protobuf:"bytes,4,opt,name=streetName,proto3" json:"streetName,omitempty"`
	BuildingNumber     string              `protobuf:"bytes,5,opt,name=buildingNumber,proto3" json:"buildingNumber,omitempty"`
	BuildingName       string              `protobuf:"bytes,6,opt,name=buildingName,proto3" json:"buildingName,omitempty"`
	Floor              string              `protobuf:"bytes,7,opt,name=floor,proto3" json:"floor,omitempty"`
	PostBox            string              `protobuf:"bytes,8,opt,name=postBox,proto3" json:"postBox,omitempty"`
	Room               string              `protobuf:"bytes,9,opt,name=room,proto3" json:"room,omitempty"`
	PostCode           string              `protobuf:"bytes,10,opt,name=postCode,proto3" json:"postCode,omitempty"`
	TownName           string              `protobuf:"bytes,11,opt,name=townName,proto3" json:"townName,omitempty"`
	TownLocation       string              `protobuf:"bytes,12,opt,name=townLocation,proto3" json:"townLocation,omitempty"`
	DistrictName       string              `protobuf:"bytes,13,opt,name=districtName,proto3" json:"districtName,omitempty"`
	CountrySubDivision string              `protobuf:"bytes,14,opt,name=countrySubDivision,proto3" json:"countrySubDivision,omitempty"`
	AddressLine        []string            `protobuf:"bytes,15,rep,name=addressLine,proto3" json:"addressLine,omitempty"`
	Country            string              `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetAddressType() Address_AddressType {
	if x != nil {
		return x.AddressType
	}
	return Address_HOME
}

func (x *Address) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Address) GetSubDepartment() string {
	if x != nil {
		return x.SubDepartment
	}
	return ""
}

func (x *Address) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *Address) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *Address) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *Address) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *Address) GetPostBox() string {
	if x != nil {
		return x.PostBox
	}
	return ""
}

func (x *Address) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Address) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Address) GetTownName() string {
	if x != nil {
		return x.TownName
	}
	return ""
}

func (x *Address) GetTownLocation() string {
	if x != nil {
		return x.TownLocation
	}
	return ""
}

func (x *Address) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Address) GetCountrySubDivision() string {
	if x != nil {
		return x.CountrySubDivision
	}
	return ""
}

func (x *Address) GetAddressLine() []string {
	if x != nil {
		return x.AddressLine
	}
	return nil
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// 5.2.8.1
type NationalIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NationalIdentifier     string                 `protobuf:"bytes,1,opt,name=nationalIdentifier,proto3" json:"nationalIdentifier,omitempty"`
	NationalIdentifierType NationalIdentifierType `protobuf:"varint,2,opt,name=nationalIdentifierType,proto3,enum=kyc.NationalIdentifierType" json:"nationalIdentifierType,omitempty"`
	CountryOfIssue         string                 `protobuf:"bytes,3,opt,name=countryOfIssue,proto3" json:"countryOfIssue,omitempty"`
	// 5.3.13 ; 8 character code representing a legal entity registration authority
	RegistrationAuthority string `protobuf:"bytes,4,opt,name=registrationAuthority,proto3" json:"registrationAuthority,omitempty"`
}

func (x *NationalIdentification) Reset() {
	*x = NationalIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NationalIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalIdentification) ProtoMessage() {}

func (x *NationalIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalIdentification.ProtoReflect.Descriptor instead.
func (*NationalIdentification) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{1}
}

func (x *NationalIdentification) GetNationalIdentifier() string {
	if x != nil {
		return x.NationalIdentifier
	}
	return ""
}

func (x *NationalIdentification) GetNationalIdentifierType() NationalIdentifierType {
	if x != nil {
		return x.NationalIdentifierType
	}
	return NationalIdentifierType_ARNU
}

func (x *NationalIdentification) GetCountryOfIssue() string {
	if x != nil {
		return x.CountryOfIssue
	}
	return ""
}

func (x *NationalIdentification) GetRegistrationAuthority() string {
	if x != nil {
		return x.RegistrationAuthority
	}
	return ""
}

type DateAndPlaceOfBirth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateOfBirth  int64  `protobuf:"varint,1,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	PlaceOfBirth string `protobuf:"bytes,2,opt,name=placeOfBirth,proto3" json:"placeOfBirth,omitempty"`
}

func (x *DateAndPlaceOfBirth) Reset() {
	*x = DateAndPlaceOfBirth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateAndPlaceOfBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateAndPlaceOfBirth) ProtoMessage() {}

func (x *DateAndPlaceOfBirth) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateAndPlaceOfBirth.ProtoReflect.Descriptor instead.
func (*DateAndPlaceOfBirth) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{2}
}

func (x *DateAndPlaceOfBirth) GetDateOfBirth() int64 {
	if x != nil {
		return x.DateOfBirth
	}
	return 0
}

func (x *DateAndPlaceOfBirth) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

type NaturalPersonNameID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryIdentifier   string                                        `protobuf:"bytes,1,opt,name=primaryIdentifier,proto3" json:"primaryIdentifier,omitempty"`
	SecondaryIdentifier string                                        `protobuf:"bytes,2,opt,name=secondaryIdentifier,proto3" json:"secondaryIdentifier,omitempty"`
	NameIdentifierType  NaturalPersonNameID_NaturalPersonNameTypeCode `protobuf:"varint,3,opt,name=nameIdentifierType,proto3,enum=kyc.NaturalPersonNameID_NaturalPersonNameTypeCode" json:"nameIdentifierType,omitempty"`
}

func (x *NaturalPersonNameID) Reset() {
	*x = NaturalPersonNameID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPersonNameID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonNameID) ProtoMessage() {}

func (x *NaturalPersonNameID) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonNameID.ProtoReflect.Descriptor instead.
func (*NaturalPersonNameID) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{3}
}

func (x *NaturalPersonNameID) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameID) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameID) GetNameIdentifierType() NaturalPersonNameID_NaturalPersonNameTypeCode {
	if x != nil {
		return x.NameIdentifierType
	}
	return NaturalPersonNameID_ALIA
}

type NaturalPersonName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameIdentifier         []*NaturalPersonNameID `protobuf:"bytes,1,rep,name=nameIdentifier,proto3" json:"nameIdentifier,omitempty"`
	LocalNameIdentifier    []string               `protobuf:"bytes,2,rep,name=localNameIdentifier,proto3" json:"localNameIdentifier,omitempty"`
	PhoneticNameIdentifier []string               `protobuf:"bytes,3,rep,name=phoneticNameIdentifier,proto3" json:"phoneticNameIdentifier,omitempty"`
}

func (x *NaturalPersonName) Reset() {
	*x = NaturalPersonName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonName) ProtoMessage() {}

func (x *NaturalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonName.ProtoReflect.Descriptor instead.
func (*NaturalPersonName) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{4}
}

func (x *NaturalPersonName) GetNameIdentifier() []*NaturalPersonNameID {
	if x != nil {
		return x.NameIdentifier
	}
	return nil
}

func (x *NaturalPersonName) GetLocalNameIdentifier() []string {
	if x != nil {
		return x.LocalNameIdentifier
	}
	return nil
}

func (x *NaturalPersonName) GetPhoneticNameIdentifier() []string {
	if x != nil {
		return x.PhoneticNameIdentifier
	}
	return nil
}

type NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   *NaturalPersonName      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GeographicAddress      []*Address              `protobuf:"bytes,2,rep,name=geographicAddress,proto3" json:"geographicAddress,omitempty"`
	NationalIdentification *NationalIdentification `protobuf:"bytes,3,opt,name=nationalIdentification,proto3" json:"nationalIdentification,omitempty"`
	CustomerIdentification string                  `protobuf:"bytes,4,opt,name=customerIdentification,proto3" json:"customerIdentification,omitempty"`
	DateAndPlaceOfBirth    *DateAndPlaceOfBirth    `protobuf:"bytes,5,opt,name=dateAndPlaceOfBirth,proto3" json:"dateAndPlaceOfBirth,omitempty"`
	CountryOfResidence     string                  `protobuf:"bytes,6,opt,name=countryOfResidence,proto3" json:"countryOfResidence,omitempty"`
}

func (x *NaturalPerson) Reset() {
	*x = NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPerson) ProtoMessage() {}

func (x *NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPerson.ProtoReflect.Descriptor instead.
func (*NaturalPerson) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{5}
}

func (x *NaturalPerson) GetName() *NaturalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NaturalPerson) GetGeographicAddress() []*Address {
	if x != nil {
		return x.GeographicAddress
	}
	return nil
}

func (x *NaturalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *NaturalPerson) GetCustomerIdentification() string {
	if x != nil {
		return x.CustomerIdentification
	}
	return ""
}

func (x *NaturalPerson) GetDateAndPlaceOfBirth() *DateAndPlaceOfBirth {
	if x != nil {
		return x.DateAndPlaceOfBirth
	}
	return nil
}

func (x *NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

// 5.2.11 and 5.2.12 (local)
type LegalPersonNameID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalPersonName               string                 `protobuf:"bytes,1,opt,name=legalPersonName,proto3" json:"legalPersonName,omitempty"`
	LegalPersonNameIdentifierType LegalPersonNameID_Type `protobuf:"varint,2,opt,name=legalPersonNameIdentifierType,proto3,enum=kyc.LegalPersonNameID_Type" json:"legalPersonNameIdentifierType,omitempty"`
}

func (x *LegalPersonNameID) Reset() {
	*x = LegalPersonNameID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPersonNameID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonNameID) ProtoMessage() {}

func (x *LegalPersonNameID) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonNameID.ProtoReflect.Descriptor instead.
func (*LegalPersonNameID) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{6}
}

func (x *LegalPersonNameID) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *LegalPersonNameID) GetLegalPersonNameIdentifierType() LegalPersonNameID_Type {
	if x != nil {
		return x.LegalPersonNameIdentifierType
	}
	return LegalPersonNameID_LEGL
}

// 5.2.10
type LegalPersonName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameIdentifier         []*LegalPersonNameID `protobuf:"bytes,1,rep,name=nameIdentifier,proto3" json:"nameIdentifier,omitempty"`
	LocalNameIdentifier    []*LegalPersonNameID `protobuf:"bytes,2,rep,name=localNameIdentifier,proto3" json:"localNameIdentifier,omitempty"`
	PhoneticNameIdentifier []*LegalPersonNameID `protobuf:"bytes,3,rep,name=phoneticNameIdentifier,proto3" json:"phoneticNameIdentifier,omitempty"`
}

func (x *LegalPersonName) Reset() {
	*x = LegalPersonName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonName) ProtoMessage() {}

func (x *LegalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonName.ProtoReflect.Descriptor instead.
func (*LegalPersonName) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{7}
}

func (x *LegalPersonName) GetNameIdentifier() []*LegalPersonNameID {
	if x != nil {
		return x.NameIdentifier
	}
	return nil
}

func (x *LegalPersonName) GetLocalNameIdentifier() []*LegalPersonNameID {
	if x != nil {
		return x.LocalNameIdentifier
	}
	return nil
}

func (x *LegalPersonName) GetPhoneticNameIdentifier() []*LegalPersonNameID {
	if x != nil {
		return x.PhoneticNameIdentifier
	}
	return nil
}

// 5.2.9
type LegalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   *LegalPersonName        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GeographicAddress      []*Address              `protobuf:"bytes,2,rep,name=geographicAddress,proto3" json:"geographicAddress,omitempty"`
	CustomerIdentification string                  `protobuf:"bytes,3,opt,name=customerIdentification,proto3" json:"customerIdentification,omitempty"`
	NationalIdentification *NationalIdentification `protobuf:"bytes,4,opt,name=nationalIdentification,proto3" json:"nationalIdentification,omitempty"`
	CountryOfRegistration  string                  `protobuf:"bytes,5,opt,name=countryOfRegistration,proto3" json:"countryOfRegistration,omitempty"`
}

func (x *LegalPerson) Reset() {
	*x = LegalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPerson) ProtoMessage() {}

func (x *LegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPerson.ProtoReflect.Descriptor instead.
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{8}
}

func (x *LegalPerson) GetName() *LegalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *LegalPerson) GetGeographicAddress() []*Address {
	if x != nil {
		return x.GeographicAddress
	}
	return nil
}

func (x *LegalPerson) GetCustomerIdentification() string {
	if x != nil {
		return x.CustomerIdentification
	}
	return ""
}

func (x *LegalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *LegalPerson) GetCountryOfRegistration() string {
	if x != nil {
		return x.CountryOfRegistration
	}
	return ""
}

// 5.2.1
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Person_NatualPerson
	//	*Person_LegalPerson
	Data isPerson_Data `protobuf_oneof:"data"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_kyc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_kyc_proto_rawDescGZIP(), []int{9}
}

func (m *Person) GetData() isPerson_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Person) GetNatualPerson() *NaturalPerson {
	if x, ok := x.GetData().(*Person_NatualPerson); ok {
		return x.NatualPerson
	}
	return nil
}

func (x *Person) GetLegalPerson() *LegalPerson {
	if x, ok := x.GetData().(*Person_LegalPerson); ok {
		return x.LegalPerson
	}
	return nil
}

type isPerson_Data interface {
	isPerson_Data()
}

type Person_NatualPerson struct {
	NatualPerson *NaturalPerson `protobuf:"bytes,1,opt,name=natualPerson,proto3,oneof"`
}

type Person_LegalPerson struct {
	LegalPerson *LegalPerson `protobuf:"bytes,2,opt,name=legalPerson,proto3,oneof"`
}

func (*Person_NatualPerson) isPerson_Data() {}

func (*Person_LegalPerson) isPerson_Data() {}

var File_kyc_proto protoreflect.FileDescriptor

var file_kyc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6b, 0x79, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6b, 0x79, 0x63,
	0x22, 0xd4, 0x04, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x77, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2b, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x5a, 0x5a, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x45, 0x4f, 0x47, 0x10, 0x02, 0x22, 0xfb, 0x01, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d,
	0x0a, 0x19, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x4c, 0x49, 0x41, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x47,
	0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x04, 0x22, 0xbf, 0x01,
	0x0a, 0x11, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79,
	0x63, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x80, 0x03, 0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x16, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x63, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x61, 0x0a, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x63, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x45, 0x47, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x41, 0x44, 0x10, 0x02, 0x22, 0xeb, 0x01, 0x0a, 0x0f,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x52,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b,
	0x79, 0x63, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x79, 0x63, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x67, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0c, 0x6e, 0x61, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x79, 0x63, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x7c, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x52, 0x4e, 0x55, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x43, 0x50,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x52, 0x4c, 0x43, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x49, 0x4e, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x58, 0x49, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x4f, 0x43, 0x53, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x43, 0x44, 0x10, 0x07, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x45, 0x49, 0x58, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x53,
	0x43, 0x10, 0x09, 0x42, 0x1c, 0x5a, 0x1a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x61, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x79,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kyc_proto_rawDescOnce sync.Once
	file_kyc_proto_rawDescData = file_kyc_proto_rawDesc
)

func file_kyc_proto_rawDescGZIP() []byte {
	file_kyc_proto_rawDescOnce.Do(func() {
		file_kyc_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyc_proto_rawDescData)
	})
	return file_kyc_proto_rawDescData
}

var file_kyc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kyc_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_kyc_proto_goTypes = []interface{}{
	(NationalIdentifierType)(0),                        // 0: kyc.NationalIdentifierType
	(Address_AddressType)(0),                           // 1: kyc.Address.AddressType
	(NaturalPersonNameID_NaturalPersonNameTypeCode)(0), // 2: kyc.NaturalPersonNameID.NaturalPersonNameTypeCode
	(LegalPersonNameID_Type)(0),                        // 3: kyc.LegalPersonNameID.Type
	(*Address)(nil),                                    // 4: kyc.Address
	(*NationalIdentification)(nil),                     // 5: kyc.NationalIdentification
	(*DateAndPlaceOfBirth)(nil),                        // 6: kyc.DateAndPlaceOfBirth
	(*NaturalPersonNameID)(nil),                        // 7: kyc.NaturalPersonNameID
	(*NaturalPersonName)(nil),                          // 8: kyc.NaturalPersonName
	(*NaturalPerson)(nil),                              // 9: kyc.NaturalPerson
	(*LegalPersonNameID)(nil),                          // 10: kyc.LegalPersonNameID
	(*LegalPersonName)(nil),                            // 11: kyc.LegalPersonName
	(*LegalPerson)(nil),                                // 12: kyc.LegalPerson
	(*Person)(nil),                                     // 13: kyc.Person
}
var file_kyc_proto_depIdxs = []int32{
	1,  // 0: kyc.Address.addressType:type_name -> kyc.Address.AddressType
	0,  // 1: kyc.NationalIdentification.nationalIdentifierType:type_name -> kyc.NationalIdentifierType
	2,  // 2: kyc.NaturalPersonNameID.nameIdentifierType:type_name -> kyc.NaturalPersonNameID.NaturalPersonNameTypeCode
	7,  // 3: kyc.NaturalPersonName.nameIdentifier:type_name -> kyc.NaturalPersonNameID
	8,  // 4: kyc.NaturalPerson.name:type_name -> kyc.NaturalPersonName
	4,  // 5: kyc.NaturalPerson.geographicAddress:type_name -> kyc.Address
	5,  // 6: kyc.NaturalPerson.nationalIdentification:type_name -> kyc.NationalIdentification
	6,  // 7: kyc.NaturalPerson.dateAndPlaceOfBirth:type_name -> kyc.DateAndPlaceOfBirth
	3,  // 8: kyc.LegalPersonNameID.legalPersonNameIdentifierType:type_name -> kyc.LegalPersonNameID.Type
	10, // 9: kyc.LegalPersonName.nameIdentifier:type_name -> kyc.LegalPersonNameID
	10, // 10: kyc.LegalPersonName.localNameIdentifier:type_name -> kyc.LegalPersonNameID
	10, // 11: kyc.LegalPersonName.phoneticNameIdentifier:type_name -> kyc.LegalPersonNameID
	11, // 12: kyc.LegalPerson.name:type_name -> kyc.LegalPersonName
	4,  // 13: kyc.LegalPerson.geographicAddress:type_name -> kyc.Address
	5,  // 14: kyc.LegalPerson.nationalIdentification:type_name -> kyc.NationalIdentification
	9,  // 15: kyc.Person.natualPerson:type_name -> kyc.NaturalPerson
	12, // 16: kyc.Person.legalPerson:type_name -> kyc.LegalPerson
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_kyc_proto_init() }
func file_kyc_proto_init() {
	if File_kyc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kyc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NationalIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateAndPlaceOfBirth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPersonNameID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPersonName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPersonNameID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPersonName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kyc_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Person_NatualPerson)(nil),
		(*Person_LegalPerson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kyc_proto_goTypes,
		DependencyIndexes: file_kyc_proto_depIdxs,
		EnumInfos:         file_kyc_proto_enumTypes,
		MessageInfos:      file_kyc_proto_msgTypes,
	}.Build()
	File_kyc_proto = out.File
	file_kyc_proto_rawDesc = nil
	file_kyc_proto_goTypes = nil
	file_kyc_proto_depIdxs = nil
}
